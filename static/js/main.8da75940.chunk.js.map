{"version":3,"sources":["n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/common/Input/Input.tsx","n2-faetures/f1-auth/a1-login/l3-dal/cards-api.ts","n0-config/config.ts","n2-faetures/f1-auth/a1-login/l2-bll/auth-reducer.ts","n1-main/m2-bll/app-reducer.tsx","n1-main/m1-ui/common/Preloader/Preloader.tsx","n1-main/m1-ui/profile/Profile.tsx","n2-faetures/f1-auth/a1-login/l1-ui/LoginForm/Login.tsx","n2-faetures/f1-auth/a1-login/l1-ui/LoginForm/LoginFormContainer.tsx","n2-faetures/f1-auth/a1-login/l1-ui/LoginPage.tsx","n1-main/m1-ui/login/Login.tsx","n2-faetures/f1-auth/a2-register/r3-dal/cards-reduser-api.ts","n2-faetures/f1-auth/a2-register/r2-bll/register-reducer.ts","n2-faetures/f1-auth/a2-register/r1-ui/Preloader/Preloader.tsx","n2-faetures/f1-auth/a2-register/r1-ui/RegisterPage.tsx","n2-faetures/f1-auth/a3-recovery/rec3-dal/recoveryApi.ts","n2-faetures/f1-auth/a3-recovery/rec2-bll/recover-password-reducer.ts","n2-faetures/f1-auth/a3-recovery/rec1-ui/RecoverPasswordPage/RecoverPasswordPage.tsx","n1-main/m1-ui/newPassword/NewPass.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/main/Main.tsx","n1-main/m2-bll/profile-reducer.ts","n1-main/m2-bll/login-reducer.ts","n1-main/m2-bll/newPassword-reducer.ts","n1-main/m2-bll/store.ts","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Input/Input.module.css","n2-faetures/f1-auth/a1-login/l1-ui/LoginForm/LoginForm.module.css","n1-main/m1-ui/common/Preloader/Preloader.module.css","n1-main/m1-ui/assets/images/loader.svg","n1-main/m1-ui/profile/Profile.module.css","n2-faetures/f1-auth/a2-register/r1-ui/Preloader/Spin-1s.svg"],"names":["Button","React","memo","props","className","red","style","button","type","onClick","click","value","Input","error","input","autoFocus","onChange","e","currentTarget","onBlur","instanse","axios","create","baseURL","withCredentials","authAPI","data","post","delete","initialState","user","isLoggedIn","setIsLoginInAC","setUserAC","setAppErrorAC","status","isInitialized","setAppStatusAC","Preloader","styles","loader","src","preloader","Profile","useSelector","state","app","auth","useState","setValue","dispatch","useDispatch","useEffect","then","res","catch","useCallback","container","name","email","avatar","token","alert","to","Login","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","length","test","onSubmit","response","message","Grid","justify","item","xs","color","toString","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","FormControlLabel","control","Checkbox","checked","variant","link","RECOVER_PASSWORD","activeClassName","activeLick","REGISTRATION","LoginFormContainer","LoginPage","instance","RegistrationApi","isRegistered","isError","isFetching","setFetchingAC","alt","Registration","registration","err","registerTC","id","handleChange","handleBlur","htmlFor","touched","disabled","RecoverApi","from","SET_ACCEPTED","isAccepted","recoverTC","RecoverPasswordPage","recoverPassword","NewPass","Routes","exact","path","render","Header","logoutHandler","nav","menu","Main","rootReducer","combineReducers","action","newPassword","login","profile","store","createStore","applyMiddleware","thunkMiddleware","window","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.8da75940.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './Button.module.css'\r\nimport {RequestStatusType} from '../../../m2-bll/app-reducer';\r\n\r\nexport type ButtonPropsType = {\r\n    click: () => void\r\n    value: string\r\n    red?: string\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo((props) => {\r\n    return (\r\n        <>\r\n            <button className={props.red === 'delete' ? `${style.button} ${style.type}` : style.button}\r\n                    onClick={props.click}\r\n            >{props.value}</button>\r\n        </>\r\n    )\r\n});\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport style from './Input.module.css'\r\n\r\nexport type InputProsType ={\r\n    onChange: (value: string) => void\r\n    value: string\r\n    pressEnter?: (event: KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n    onBlur?: () => void\r\n}\r\n\r\nexport const Input: React.FC<InputProsType> = React.memo( (props) => {\r\n\r\n    const newText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input className={props.error ? `${style.input} ${style.error}` : style.input} type=\"text\"\r\n                   autoFocus\r\n                   value={props.value}\r\n                   onChange={newText}\r\n                   onBlur={props.onBlur}\r\n                // onKeyPress={props.pressEnter}\r\n            />\r\n        </div>\r\n    )\r\n});\r\n\r\n","import axios from 'axios'\r\nimport {BACK_URL} from '../../../../n0-config/config';\r\n\r\nconst instanse = axios.create({\r\n    baseURL: BACK_URL,\r\n    withCredentials: true\r\n});\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instanse.post<UserType>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instanse.delete<LogoutParamsType>('auth/me')\r\n    },\r\n    me() {\r\n        return instanse.post<UserType>('auth/me')\r\n    }\r\n};\r\n\r\n// types for auth\r\nexport type LogoutParamsType = {\r\n    info: string\r\n    error: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type UserType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string,\r\n    publicCardPacksCount: number, // количество колод\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    error: string,\r\n}\r\n","// export const BACK_URL = 'http://localhost:7542/2.0/';//for developers\r\n// export const BACK_URL = 'https://github.com/IgnatZakalinsky/cards-nya-back-2-0/';//alpha release\r\nexport const BACK_URL = 'https://neko-back.herokuapp.com/2.0';//alpha release\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType, UserType} from '../l3-dal/cards-api';\r\nimport {setAppStatusAC} from '../../../../n1-main/m2-bll/app-reducer';\r\n\r\nconst SET_IS_LOGGED_IN = 'login/SET_IS_LOGGED_IN';\r\nconst SET_USER = 'login/SET_USER';\r\nconst SET_ERROR = 'login/SET-ERROR';\r\n\r\nconst initialState = {\r\n    user: {\r\n        // _id: '',\r\n        // email: '',\r\n        // name: '',\r\n        // avatar: '',\r\n        // publicCardPacksCount: 0, // количество колод\r\n        // created: new Date(),\r\n        // updated: new Date(),\r\n        // isAdmin: false,\r\n        // verified: false, // подтвердил ли почту\r\n        // rememberMe: false,\r\n        // error: '',\r\n    },\r\n    isLoggedIn: false,\r\n    error: null as string | null,\r\n};\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGGED_IN:\r\n            return {...state, isLoggedIn: action.value};\r\n        case SET_USER:\r\n            return {...state, user: {...action.user}};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setIsLoginInAC = (value: boolean) =>\r\n    ({type: SET_IS_LOGGED_IN, value} as const);\r\nexport const setUserAC = (user: UserType) =>\r\n    ({type: SET_USER, user} as const);\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: SET_ERROR, error} as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data) {\r\n                dispatch(setUserAC(res.data));\r\n                dispatch(setIsLoginInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                dispatch(setAppErrorAC('error'));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppErrorAC(e.response ? (e.response.data.error) : (e.message + ', more details in the console')))\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if(res.data) {\r\n                dispatch(setIsLoginInAC(false));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                dispatch(setAppErrorAC('error'));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            }\r\n        })\r\n};\r\n\r\n\r\n// types\r\nexport type AuthInitialStateType = typeof initialState\r\ntype ActionsType = ReturnType<typeof setIsLoginInAC>\r\n    | ReturnType<typeof setUserAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../../n2-faetures/f1-auth/a1-login/l3-dal/cards-api';\r\nimport {setIsLoginInAC, setUserAC} from '../../n2-faetures/f1-auth/a1-login/l2-bll/auth-reducer';\r\n\r\nconst SET_STATUS = 'APP/SET-STATUS';\r\nconst SET_ERROR = 'APP/SET-ERROR';\r\nconst SET_IS_INITIALIZED = 'APP/SET-IS-INITIALIZED';\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {...state, status: action.status};\r\n        case SET_ERROR:\r\n            return {...state, error: action.error};\r\n        case SET_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.isInitialized};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: SET_STATUS, status} as const);\r\nexport const setAppErrorAC = (error: string | null) => ({type: SET_ERROR, error} as const);\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({type: SET_IS_INITIALIZED, isInitialized} as const);\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data) {\r\n                dispatch(setUserAC(res.data));\r\n                dispatch(setIsLoginInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                dispatch(setIsLoginInAC(false));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            }\r\n            dispatch(setAppIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n\r\n};\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = typeof initialState\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setAppIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedActionType\r\n\r\n\r\n","import styles from './Preloader.module.css';\r\nimport preloader from '../../assets/images//loader.svg';\r\nimport React from 'react';\r\n\r\nexport type PreloaderPropsType = {}\r\n\r\nexport const Preloader: React.FC<PreloaderPropsType> = (props) => {\r\n    return (\r\n        <div className={styles.loader}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n};\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Button} from '../common/Button/Button';\r\nimport {Input} from '../common/Input/Input';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {initializeAppTC, RequestStatusType} from '../../m2-bll/app-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport styles from './Profile.module.css'\r\n\r\nexport const Profile = React.memo(() => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    let user = useSelector<AppRootStateType, any>(state => state.auth.user);\r\n    const [value, setValue] = useState('demo input');\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch]);\r\n\r\n    const onChange = useCallback((value: string) => {\r\n        setValue(value)\r\n    }, [value]);\r\n\r\n    const onBlur = useCallback(() => {\r\n        setValue('demo input')\r\n    }, [value]);\r\n\r\n\r\n    if (status === 'loading') {\r\n        return <div>\r\n            <Preloader/>\r\n        </div>\r\n    }\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h1>Profile</h1>\r\n            <div>name: {user.name}</div>\r\n            <div>email: {user.email} </div>\r\n            <div>avatar: {user.avatar}</div>\r\n            <div>token: {user.token}</div>\r\n            <Input value={value} onChange={onChange} onBlur={onBlur}/>\r\n            <Button value={'demo'} click={() => alert('CLICK')}/>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n","import React from 'react'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../../../../n1-main/m2-bll/store';\r\nimport {loginTC} from '../../l2-bll/auth-reducer';\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from '@material-ui/core';\r\nimport style from './LoginForm.module.css';\r\nimport {RECOVER_PASSWORD, REGISTRATION} from '../../../../../n1-main/m1-ui/routes/Routes';\r\nimport styles from '../../../../../n1-main/m1-ui/header/Header.module.css';\r\nimport {RequestStatusType} from '../../../../../n1-main/m2-bll/app-reducer';\r\nimport {Preloader} from '../../../../../n1-main/m1-ui/common/Preloader/Preloader';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.auth.error);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 6) {\r\n                errors.password = 'password must be more than 6 characters';\r\n            }\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    });\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            {error && <div style={{color: 'red'}}>{error.toString()}</div>}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n            <div className={style.link}>\r\n                <NavLink to={RECOVER_PASSWORD} activeClassName={styles.activeLick}>fogot fassword?</NavLink>\r\n            </div>\r\n            <div className={style.link}>\r\n                <NavLink to={REGISTRATION} activeClassName={styles.activeLick}>register</NavLink>\r\n            </div>\r\n        </Grid>\r\n    </Grid>\r\n};\r\n","import React from 'react';\r\nimport {LoginForm} from './LoginForm';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../../../n1-main/m2-bll/store';\r\nimport {RequestStatusType} from '../../../../../n1-main/m2-bll/app-reducer';\r\nimport {Preloader} from '../../../../../n1-main/m1-ui/common/Preloader/Preloader';\r\nimport {Login} from './Login';\r\n\r\nexport const LoginFormContainer = React.memo(() => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<LoginForm/>*/}\r\n            <Login/>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\n","import React from 'react';\r\nimport {LoginFormContainer} from './LoginForm/LoginFormContainer';\r\n\r\nexport const LoginPage = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <LoginFormContainer/>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport {LoginPage} from '../../../n2-faetures/f1-auth/a1-login/l1-ui/LoginPage';\r\n\r\nexport const Login = React.memo(() => {\r\n    return (\r\n        <div>\r\n           <h1>Login</h1>\r\n            <LoginPage/>\r\n        </div>\r\n    )\r\n});\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const RegistrationApi = {\r\n    register(email: string, password: string) {\r\n        return instance.post(`auth/register`, {\r\n            email,\r\n            password,\r\n        });\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {RegistrationApi} from \"../r3-dal/cards-reduser-api\";\r\n\r\nconst REGISTER: 'REGISTER' = 'REGISTER';\r\nconst SET_ERROR: 'SET_ERROR' = 'SET_ERROR';\r\nconst SET_FETCHING: 'SET_FETCHING' = 'SET_FETCHING';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    isError: false,\r\n    isFetching: false,\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                isRegistered: action.isRegistered,\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                isError: action.isError,\r\n            };\r\n        case SET_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const registrationAC = (isRegistered: boolean) => ({type: REGISTER, isRegistered} as const);\r\nconst setErrorAC = (isError: boolean) => ({type: SET_ERROR, isError} as const);\r\nconst setFetchingAC = (isFetching: boolean) => ({type: SET_FETCHING, isFetching} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof registrationAC | typeof setErrorAC | typeof setFetchingAC>;\r\n\r\nexport const registerTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setFetchingAC(true));\r\n    RegistrationApi.register(email, password).then(res => {\r\n        dispatch(registrationAC(true));\r\n        dispatch(setFetchingAC(false));\r\n\r\n    }).catch(err => {\r\n        dispatch(setErrorAC(true))\r\n        dispatch(setFetchingAC(false));\r\n    });\r\n}\r\n","import React from 'react';\r\n\r\nimport preloader from \"./Spin-1s.svg\";\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return <div>\r\n        <img src={preloader} alt={'preloader'}/>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {registerTC} from \"../r2-bll/register-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Preloader} from \"./Preloader/Preloader\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\n\r\nconst validate = (values: any) => {\r\n    const errors: any = {};\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length <= 3) {\r\n        errors.password = 'Must be at least 3 characters';\r\n    } else if (values.password.length > 100) {\r\n        errors.password = 'Must be not more than 100 characters';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\n\r\nexport const Registration = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isError = useSelector<AppRootStateType>(state => state.registration.isError);\r\n    const isRegistered = useSelector<AppRootStateType>(state => state.registration.isRegistered);\r\n    const isFetching = useSelector<AppRootStateType>(state => state.registration.isFetching);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email, password} = values;\r\n            dispatch(registerTC(email, password));\r\n        },\r\n    });\r\n\r\n    if(isFetching && !isRegistered && !isError){\r\n        return <Preloader/>;\r\n    }\r\n    if(isError && !isFetching) {\r\n        return <div>Error!</div>;\r\n    }\r\n\r\n    if(isRegistered && !isFetching) {\r\n        return <Redirect to={'login'}/>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Registration</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <ul>\r\n                    <li><input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.email}\r\n                    /> <label htmlFor=\"email\">Email Address</label>\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div>{formik.errors.email}</div>\r\n                        ) : null}\r\n                    </li>\r\n                    <li><input\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.password}\r\n                    /> <label htmlFor=\"password\">Password</label>\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div>{formik.errors.password}</div>\r\n                        ) : null}\r\n                    </li>\r\n                </ul>\r\n                <button type=\"submit\" disabled={!!isFetching}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n});\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const RecoverApi = {\r\n    recover(email: string) {\r\n        return instance.post(`auth/forgot`, {\r\n            email,\r\n            from: `test-front-admin <ai73a@yandex.by>`,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                     password recovery link: <a href='http://localhost:3000/#/set-new-password/$token$'>\r\n                     link</a></div>`,\r\n        });\r\n    },\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {RecoverApi} from \"../rec3-dal/recoveryApi\";\r\n\r\nconst SET_ACCEPTED: 'recover-password/SET_ACCEPTED' = 'recover-password/SET_ACCEPTED';\r\nconst SET_ERROR: 'recover-password/SET_ERROR' = 'recover-password/SET_ERROR';\r\nconst SET_FETCHING: 'recover-password/SET_FETCHING' = 'recover-password/SET_FETCHING';\r\n\r\nconst initialState = {\r\n    isAccepted: false,\r\n    isError: false,\r\n    isFetching: false,\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_ACCEPTED:\r\n            return {\r\n                ...state,\r\n                isAccepted: action.isAccepted,\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                isError: action.isError,\r\n            };\r\n        case SET_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setAcceptedAC = (isAccepted: boolean) => ({type: SET_ACCEPTED, isAccepted} as const);\r\nconst setErrorAC = (isError: boolean) => ({type: SET_ERROR, isError} as const);\r\nconst setFetchingAC = (isFetching: boolean) => ({type: SET_FETCHING, isFetching} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setAcceptedAC | typeof setErrorAC | typeof setFetchingAC>;\r\n\r\nexport const recoverTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(setFetchingAC(true));\r\n    RecoverApi.recover(email).then(res => {\r\n        dispatch(setAcceptedAC(true));\r\n        dispatch(setFetchingAC(false));\r\n\r\n    }).catch(err => {\r\n        dispatch(setErrorAC(true))\r\n        dispatch(setFetchingAC(false));\r\n    });\r\n}\r\n","import React, {memo} from \"react\";\r\n\r\nimport styles from './RecoverPasswordPage.module.css';\r\nimport {useFormik} from \"formik\";\r\nimport {registerTC} from \"../../../a2-register/r2-bll/register-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../../n1-main/m2-bll/store\";\r\nimport {recoverTC} from \"../../rec2-bll/recover-password-reducer\";\r\nimport {Preloader} from \"../../../a2-register/r1-ui/Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst validate = (values: any) => {\r\n    const errors: any = {};\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    return errors;\r\n};\r\n\r\n\r\nexport const RecoverPasswordPage = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isError = useSelector<AppRootStateType>(state => state.recoverPassword.isError);\r\n    const isFetching = useSelector<AppRootStateType>(state => state.recoverPassword.isFetching);\r\n    const isAccepted = useSelector<AppRootStateType>(state => state.recoverPassword.isAccepted);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email} = values;\r\n            dispatch(recoverTC(email));\r\n        },\r\n    });\r\n\r\n    if(isFetching && !isAccepted && !isError){\r\n        return <Preloader/>;\r\n    }\r\n    if(isError && !isFetching) {\r\n        return <div>Error!</div>;\r\n    }\r\n\r\n    if(isAccepted && !isFetching) {\r\n        return <Redirect to={'newPass'}/>;\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <h1>Recover Password</h1>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <ul>\r\n                        <li><input\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}\r\n                        /> <label htmlFor=\"email\">Email Address</label>\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div>{formik.errors.email}</div>\r\n                            ) : null}\r\n                        </li>\r\n                    </ul>\r\n                    <button type=\"submit\" disabled={!!isFetching}>Submit</button>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n)\r\n","import React from 'react';\r\n\r\nexport const NewPass = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h1>NewPassword</h1>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport {Profile} from '../profile/Profile';\r\nimport {Login} from '../login/Login';\r\nimport {Registration} from '../../../n2-faetures/f1-auth/a2-register/r1-ui/RegisterPage';\r\nimport {RecoverPasswordPage} from '../../../n2-faetures/f1-auth/a3-recovery/rec1-ui/RecoverPasswordPage/RecoverPasswordPage';\r\nimport {NewPass} from '../newPassword/NewPass';\r\n\r\nexport const PROFILE = '/';\r\nexport const LOGIN = '/login';\r\nexport const REGISTRATION = '/registration';\r\nexport const RECOVER_PASSWORD = '/recoverPassword';\r\nexport const NEW_PASS = '/newPass';\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Route exact path={PROFILE} render={() => <Profile/>}/>\r\n            <Route path={LOGIN} render={() => <Login/>}/>\r\n            <Route path={REGISTRATION} render={() => <Registration/>}/>\r\n            <Route path={RECOVER_PASSWORD} render={() => <RecoverPasswordPage/>}/>\r\n            <Route path={NEW_PASS} render={() => <NewPass/>}/>\r\n        </div>\r\n    )\r\n};\r\n","import React, {useCallback} from 'react';\r\nimport styles from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {LOGIN, NEW_PASS, PROFILE, RECOVER_PASSWORD, REGISTRATION} from '../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {Button} from '@material-ui/core';\r\nimport { logoutTC } from '../../../n2-faetures/f1-auth/a1-login/l2-bll/auth-reducer';\r\n\r\nexport const Header = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [isLoggedIn]);\r\n\r\n    return (\r\n        <div className={styles.nav}>\r\n            <div className={styles.menu}>\r\n\r\n                <div className={styles.button}>\r\n                    {isLoggedIn && <Button variant=\"contained\" color=\"primary\" onClick={logoutHandler}>Log out</Button>}\r\n                </div>\r\n\r\n                <div className={styles.item}>\r\n                    <NavLink exact to={PROFILE} activeClassName={styles.activeLick}>Profile</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={LOGIN} activeClassName={styles.activeLick}>Login</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={REGISTRATION} activeClassName={styles.activeLick}>Registration</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={RECOVER_PASSWORD} activeClassName={styles.activeLick}>RecoverPassword</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={NEW_PASS} activeClassName={styles.activeLick}>NewPass</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Header} from '../header/Header';\r\nimport {Routes} from '../routes/Routes';\r\n\r\nexport const Main = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    )\r\n});\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReduser = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE':\r\n            return {...state};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// actions\r\nexport const profileAC = () => ({type: 'PROFILE'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof profileAC>\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_LOGGET_IN':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setIsLoggedInAC = () => ({type: 'SET_IS_LOGGET_IN'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_NEW_PASSWORD':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const newPassworddAC = () => ({type: 'SET_NEW_PASSWORD'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof newPassworddAC>\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {profileReduser} from './profile-reducer';\r\nimport {loginReducer} from './login-reducer';\r\nimport {newPasswordReducer} from './newPassword-reducer';\r\nimport {registrationReducer} from '../../n2-faetures/f1-auth/a2-register/r2-bll/register-reducer';\r\nimport {recoverPasswordReducer} from '../../n2-faetures/f1-auth/a3-recovery/rec2-bll/recover-password-reducer';\r\nimport {authReducer} from '../../n2-faetures/f1-auth/a1-login/l2-bll/auth-reducer';\r\nimport {appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    registration: registrationReducer,\r\n    newPassword: newPasswordReducer,\r\n    recoverPassword: recoverPasswordReducer,\r\n    login: loginReducer,\r\n    profile: profileReduser,\r\n    auth: authReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from './main/Main';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from '../m2-bll/store';\r\n\r\ntype AppPropsType = {}\r\n\r\nexport const App: React.FC<AppPropsType> = (props) => {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <div>\r\n                        <Main/>\r\n                    </div>\r\n                </Provider>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Header_menu__65jxK\",\"button\":\"Header_button__287bi\",\"item\":\"Header_item__2qKv2\",\"activeLick\":\"Header_activeLick__1cFc1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3CMgV\",\"type\":\"Button_type__NuwvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3eGfu\",\"error\":\"Input_error__1iSZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"LoginForm_loginBlock__3Hd_A\",\"inputBlock\":\"LoginForm_inputBlock__xysX4\",\"checkboxBlock\":\"LoginForm_checkboxBlock__1tfzN\",\"link\":\"LoginForm_link__FsZ_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2pNSR\"};","module.exports = __webpack_public_path__ + \"static/media/loader.b31e4952.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__1VY1m\"};","module.exports = __webpack_public_path__ + \"static/media/Spin-1s.62e138ae.svg\";"],"sourceRoot":""}