{"version":3,"sources":["n1-main/m1-ui/common/Button/Button.module.css","n1-main/m1-ui/common/Input/Input.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m1-ui/common/Input/Input.tsx","n1-main/m1-ui/profile/Profile.tsx","n1-main/m1-ui/login/Login.tsx","n1-main/m1-ui/registration/Registration.tsx","n1-main/m1-ui/recoverPassword/RecoverPassword.tsx","n1-main/m1-ui/newPassword/NewPass.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/main/Main.tsx","n1-main/m2-bll/profile-reducer.ts","n1-main/m2-bll/login-reducer.ts","n1-main/m2-bll/newPassword-reducer.ts","n1-main/m2-bll/registration-reducer.ts","n1-main/m2-bll/recoverPassword-reducer.ts","n1-main/m2-bll/store.ts","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","React","memo","props","className","red","style","button","type","onClick","click","value","Input","error","input","autoFocus","onChange","e","currentTarget","onBlur","Profile","useState","setValue","useCallback","alert","Login","Registration","RecoverPassword","NewPass","Routes","exact","path","render","Header","styles","nav","menu","item","to","activeClassName","activeLick","Main","initialState","rootReducer","combineReducers","registration","state","action","newPassword","recoverPassword","login","profile","store","createStore","applyMiddleware","thunkMiddleware","window","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.db1dd302.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3CMgV\",\"type\":\"Button_type__NuwvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3eGfu\",\"error\":\"Input_error__1iSZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Header_menu__65jxK\",\"item\":\"Header_item__2qKv2\",\"activeLick\":\"Header_activeLick__1cFc1\"};","import React from 'react';\r\nimport style from './Button.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    click: () => void\r\n    value: string\r\n    red?: string\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo((props) => {\r\n    return (\r\n        <>\r\n            <button className={props.red === 'delete' ? `${style.button} ${style.type}` : style.button} onClick={props.click}>{props.value}</button>\r\n        </>\r\n    )\r\n});\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport style from './Input.module.css'\r\n\r\nexport type InputProsType ={\r\n    onChange: (value: string) => void\r\n    value: string\r\n    pressEnter?: (event: KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n    onBlur: () => void\r\n}\r\n\r\nexport const Input: React.FC<InputProsType> = React.memo( (props) => {\r\n\r\n    const newText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input className={props.error ? `${style.input} ${style.error}` : style.input} type=\"text\"\r\n                   autoFocus\r\n                   value={props.value}\r\n                   onChange={newText}\r\n                   onBlur={props.onBlur}\r\n                // onKeyPress={props.pressEnter}\r\n            />\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {Button} from '../common/Button/Button';\r\nimport {Input} from '../common/Input/Input';\r\n\r\nexport const Profile = React.memo(() => {\r\n\r\n    const [value, setValue] = useState('demo input');\r\n\r\n    const onChange = useCallback((value: string) => {\r\n        setValue(value)\r\n    }, [value]);\r\n\r\n    const onBlur = useCallback(() => {\r\n        setValue('demo input')\r\n    }, [value]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <Input value={value} onChange={onChange} onBlur={onBlur}/>\r\n            <Button value={'demo'} click={() => alert('CLICK')}/>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\n\r\nexport const Login = React.memo(() => {\r\n    return (\r\n        <div>\r\n           <h1>Login</h1>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\n\r\nexport const Registration = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h1>Registration</h1>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\n\r\nexport const RecoverPassword = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h1>RecoverPassword</h1>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\n\r\nexport const NewPass = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <h1>NewPassword</h1>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport {Profile} from '../profile/Profile';\r\nimport {Login} from '../login/Login';\r\nimport {Registration} from '../registration/Registration';\r\nimport {RecoverPassword} from '../recoverPassword/RecoverPassword';\r\nimport {NewPass} from '../newPassword/NewPass';\r\n\r\nexport const PROFILE = '/';\r\nexport const LOGIN = '/login';\r\nexport const REGISTRATION = '/registration';\r\nexport const RECOVER_PASSWORD = '/recoverPassword';\r\nexport const NEW_PASS = '/newPass';\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Route exact path={PROFILE} render={() => <Profile/>}/>\r\n            <Route path={LOGIN} render={() => <Login/>}/>\r\n            <Route path={REGISTRATION} render={() => <Registration/>}/>\r\n            <Route path={RECOVER_PASSWORD} render={() => <RecoverPassword/>}/>\r\n            <Route path={NEW_PASS} render={() => <NewPass/>}/>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport styles from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {LOGIN, NEW_PASS, PROFILE, RECOVER_PASSWORD, REGISTRATION} from '../routes/Routes';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={styles.nav}>\r\n            <div className={styles.menu} >\r\n                <div className={styles.item}>\r\n                    <NavLink exact to={PROFILE} activeClassName={styles.activeLick}>Profile</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={LOGIN} activeClassName={styles.activeLick}>Login</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={REGISTRATION} activeClassName={styles.activeLick}>Registration</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={RECOVER_PASSWORD} activeClassName={styles.activeLick}>RecoverPassword</NavLink>\r\n                </div>\r\n                <div className={styles.item}>\r\n                    <NavLink to={NEW_PASS} activeClassName={styles.activeLick}>NewPass</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Header} from '../header/Header';\r\nimport {Routes} from '../routes/Routes';\r\n\r\nexport const Main = React.memo(() => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    )\r\n});\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReduser = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE':\r\n            return {...state};\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// actions\r\nexport const profileAC = () => ({type: 'PROFILE'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof profileAC>\r\n","\r\nconst initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_LOGGET_IN':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setIsLoggedInAC = () => ({type: 'SET_IS_LOGGET_IN'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_NEW_PASSWORD':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const newPassworddAC = () => ({type: 'SET_NEW_PASSWORD'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof newPassworddAC>\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReduser = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const registrationAC = () => ({type: 'REGISTRATION'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof registrationAC>\r\n","const initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoverPasswordReducer = (state: InitialStateType = initialState , action: ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'RECOVER_PASSWORD':\r\n            return {...state};\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n// actions\r\nexport const recoverPasswordAC = () => ({type: 'RECOVER_PASSWORD'} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof recoverPasswordAC>\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {profileReduser} from './profile-reducer';\r\nimport {loginReducer} from './login-reducer';\r\nimport {newPasswordReducer} from './newPassword-reducer';\r\nimport {registrationReduser} from './registration-reducer';\r\nimport {recoverPasswordReducer} from './recoverPassword-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    registration: registrationReduser,\r\n    newPassword: newPasswordReducer,\r\n    recoverPassword: recoverPasswordReducer,\r\n    login: loginReducer,\r\n    profile: profileReduser,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport './App.css';\nimport {Main} from './main/Main';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {store} from '../m2-bll/store';\n\ntype AppPropsType = {}\n\nexport const App: React.FC<AppPropsType> = (props) => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Provider store={store}>\n                    <div>\n                        <h1>REACT FOREVER</h1>\n                        <Main/>\n                    </div>\n                </Provider>\n            </HashRouter>\n        </div>\n    );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}